<?php
/**
 * @file
 *   Xero API module
 *   Implements the PHP-Xero Library in Drupal to allow queries to
 *   xero.com
 *
 *   Curently supported:
 *
 *   1. GET Query for any Xero entity such as Contacts, Invoices, Payments, etc...
 *   2. POST Query for Invoices.
 *   3. PUT Query for Payments.
 *   4. Caching of Xero entities.
 *   5. Form generation for Contacts, Invoices, and Accounts.
 *
 */


/**
 * Implementation of hook_permission().
 *
 * These are basic permissions. It is up to individual module developers
 * to add more complex permissions in their modules. This may change in
 * the future.
 */
function xero_permission() {
  return array(
    'access xero' => array(
      'title' => t('Access Xero'),
      'description' => t('Grants access of basic information related to Xero.'),
    ),
    'post to xero' => array(
      'title' => t('Post to Xero'),
      'description' => t('Grants access to make post requests to Xero.'),
    ),
  );
}

/**
 * Load Xero Guzzle client.
 *
 * @return \BlackOptic\XeroBundle\XeroClient
 *   A XeroClient object or FALSE.
 */
function xero_load() {
  return \Drupal::service('xero.client');
}

/**
 * Get or post an object type to xero.
 *
 * @param $type two possible values: get or post. put is not supported.
 * @param $action the type of action we're doing: Invoices, Contacts, etc...
 * @param $id an optional id of the xero object such as contactid, invoiceid, etc...
 * @param $after an optional ModifiedAfter parameter for a get query.
 * @param $items an optional array of items to post such as contacts, invoices, etc...
 * @param $method an optional string for response format: xml, json, or pdf.
 * @return returns a result array from the PHP-Xero containing status & the data posted
 *         or returns NULL if there was an error before querying.
 *
 * Example:
 *
 *   //Return all contacts for your xero account.
 *   $result = xero_query('get', 'Contacts');
 *
 *   //Post a new contact.
 *   $contacts = array('Contact' => array('Name' => 'New Contact'));
 *   $result = xero_query('post', 'Contacts', FALSE, FALSE, $contacts);
 *
 *   //Query a new contact by it's Name element, not the ContactID.
 *   $result = xero_query('get', 'Contacts', FALSE, FALSE, array('Name' => 'New Contact'));
 *
 *   See PHP-Xero and developer.xero.com for more information.
 *
 */
function xero_query($type = 'get', $action, $id = FALSE, $after = FALSE, $items = array(), $method = 'json') {
  $xero = xero_load($method);

  if (!$xero->verify()) {
    xero_error(0, '', 'Error trying to make a xero connection object.', $items);
    return NULL;
  }

  if ($type == 'get') {
    if (!$id && !$after && empty($items)) {
      $result = $xero->$action;
    }
    else {
      $result = $xero->$action($id, $after, $items);
    }
  }
  elseif ($type == 'post') {
    $result = $xero->$action($items);
  }
  else {
    xero_error(0, '', t('%type is not a valid type of get or post.', array('%type' => $type)), $items);
    return NULL;
  }

  if (isset($result['ErrorNumber'])) {
    xero_error($result['ErrorNumber'], $result['Type'], $result['Message'], $items, $result);
  }

  return $result;
}

/**
 * Evaluate error messages and send appropriate drupal status messages.
 * @param $code Optional Xero error code.
 * @param $type Optional Xero error type.
 * @param $message Xero error message.
 * @param $items The items that were posted.
 * @param $result The entire result array.
 */
function xero_error($code = 0, $type = '', $message, $items = 'N/A', $result = 'N/A') {
  $error_code = (!empty($type)) ? $code . ' ' . $type : $code;
  $format_options = array('@code' => $error_code, '@message' => $message);
  // drupal_set_message(t('Error @code: @message', $format_options), 'error');

  $format_options['!items'] = '<div><h3>Items</h3><pre>' . print_r($items, TRUE) . '</pre></div>';
  $format_options['!result'] = '<div><h3>Result</h3><pre>' . print_r($result, TRUE) . '</pre></div>';
  // watchdog('xero', 'Error @code: @message !items !result', $format_options, WATCHDOG_CRITICAL, NULL);
}
