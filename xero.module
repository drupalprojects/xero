<?php
/**
 * @file
 * Xero API module
 *
 * Implements the PHP-Xero Library in Drupal to allow queries to xero.com.
 */


/**
 * Implementation of hook_permission().
 *
 * These are basic permissions. It is up to individual module developers
 * to add more complex permissions in their modules. This may change in
 * the future.
 */
function xero_permission() {
  return array(
    'access xero' => array(
      'title' => t('Access Xero'),
      'description' => t('Grants access of basic information related to Xero.'),
    ),
    'post to xero' => array(
      'title' => t('Post to Xero'),
      'description' => t('Grants access to make post requests to Xero.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function xero_theme($existing, $type, $theme, $path) {
  return array(
    'xero_reference' => array(
      'variables' => array(
        'item' => NULL,
        'delta' => NULL,
        'definition' => NULL,
        'settings' => NULL,
        'attributes' => NULL,
      ),
      'file' => 'xero.theme.inc',
      'template' => 'xero-reference',
    ),
  );
}

/**
 * Implements hook_validation_constraint_alter().
 *
 * DrupalWTF: Why the hell are constraints plugins, which means that no one can
 * even re-use Symfony constraints out of the box without having to do some
 * dumb hack like this or creating your own plugin!?
 */
function xero_validation_constraint_alter(&$definitions) {
  $definitions['Choice'] = array(
    'class' => 'Symfony\Component\Validator\Constraints\Choice',
    'provider' => 'xero',
  );
}

/**
 * Load Xero Guzzle client.
 *
 * @return \BlackOptic\XeroBundle\XeroClient
 *   A XeroClient object or FALSE.
 */
function xero_load() {
  return \Drupal::service('xero.client');
}

/**
 * Load the Xero Query service.
 *
 * @return \Drupal\xero\XeroQuery
 *   A XeroQuery object.
 */
function xero_query_load() {
  return \Drupal::service('xero.query');
}

/**
 * Get or post an object type to xero. Using the {xero.query} service is highly
 * recommended instead.
 *
 * @deprecated
 *
 * @param $method
 *   The HTTP method to use: get or post.
 * @param $plugin_id
 *   The Xero data type plugin_id.
 * @param $id
 *   (Optional) The Xero GUID to use for get or pst.
 * @param $after
 *   (Optional) ModifiedAfter parameter for a get query.
 * @param $items
 *   (Optional) An array of items to post such as contacts, invoices, etc...
 * @param $method
 *   (Optional) The content-type to use for the response: xml, json, or pdf.
 * @return \Drupal\xero\TypedData\XeroTypeInterface
 *   Return TypedData from the response or FALSE.
 *
 * Example:
 *
 *   // Return all contacts for your xero account.
 *   $result = xero_query('get', 'xero_contact');
 *
 *   // Post a new contact.
 *   $contacts = array('Contact' => array('Name' => 'New Contact'));
 *   $result = xero_query('post', 'xero_contact', FALSE, FALSE, $contacts);
 *
 *   The following usage from Drupal 7 is NOT allowed any more:
 *   // Query a new contact by it's Name element, not the ContactID.
 *   $result = xero_query('get', 'xero_contact', FALSE, FALSE, array('Name' => 'New Contact'));
 *
 *   See PHP-Xero and developer.xero.com for more information.
 */
function xero_query($method = 'get', $plugin_id, $id = FALSE, $after = FALSE, $items = array(), $format = 'xml') {

  $xero = xero_query_load();

  $xero
    ->setMethod($method)
    ->setFormat($format)
    ->setType($plugin_id);

  if ($id) {
    $xero->setId($id);
  }

  if ($after) {
    $xero->setModifiedAfter($after);
  }

  if ($items) {
    $list_definition = $xero->typed_data->createListDataDefinition($plugin_id);
    $data = $xero->typed_data->create($xero->getDefinition(), $items, NULL, $list_definition);

    $xero->setData($data);
  }

  return $xero->execute();
}
