<?php
/**
 * @file
 *   Xero API module
 *   Implements the PHP-Xero Library in Drupal to allow queries to
 *   xero.com
 *
 *   Curently supported:
 *
 *   1. GET Query for any Xero entity such as Contacts, Invoices, Payments, etc...
 *   2. POST Query for Invoices.
 *   3. PUT Query for Payments.
 *   4. Caching of Xero entities.
 *   5. Form generation for Contacts, Invoices, and Accounts.
 *
 */


/**
 * Implementation of hook_permission().
 *
 * These are basic permissions. It is up to individual module developers
 * to add more complex permissions in their modules. This may change in
 * the future.
 */
function xero_permission() {
  return array(
    'access xero' => array(
      'title' => t('Access Xero'),
      'description' => t('Grants access of basic information related to Xero.'),
    ),
    'post to xero' => array(
      'title' => t('Post to Xero'),
      'description' => t('Grants access to make post requests to Xero.'),
    ),
  );
}

/**
 * Load Xero Guzzle client.
 *
 * @return \BlackOptic\XeroBundle\XeroClient
 *   A XeroClient object or FALSE.
 */
function xero_load() {
  return \Drupal::service('xero.client');
}

/**
 * Get or post an object type to xero. Using the {xero.query} service is highly
 * recommended instead.
 *
 * @deprecated
 *
 * @param $method
 *   The HTTP method to use: get or post.
 * @param $plugin_id
 *   The Xero data type plugin_id.
 * @param $id
 *   (Optional) The Xero GUID to use for get or pst.
 * @param $after
 *   (Optional) ModifiedAfter parameter for a get query.
 * @param $items
 *   (Optional) An array of items to post such as contacts, invoices, etc...
 * @param $method
 *   (Optional) The content-type to use for the response: xml, json, or pdf.
 * @return \Drupal\xero\TypedData\XeroTypeInterface
 *   Return TypedData from the response or FALSE.
 *
 * Example:
 *
 *   // Return all contacts for your xero account.
 *   $result = xero_query('get', 'xero_contact');
 *
 *   // Post a new contact.
 *   $contacts = array('Contact' => array('Name' => 'New Contact'));
 *   $result = xero_query('post', 'xero_contact', FALSE, FALSE, $contacts);
 *
 *   The following usage from Drupal 7 is NOT allowed any more:
 *   // Query a new contact by it's Name element, not the ContactID.
 *   $result = xero_query('get', 'xero_contact', FALSE, FALSE, array('Name' => 'New Contact'));
 *
 *   See PHP-Xero and developer.xero.com for more information.
 */
function xero_query($method = 'get', $plugin_id, $id = FALSE, $after = FALSE, $items = array(), $format = 'xml') {

  $xero = \Drupal::service('xero.query');

  $xero
    ->setMethod($method)
    ->setFormat($format)
    ->setType($plugin_id);

  if ($id) {
    $xero->setId($id);
  }

  if ($after) {
    $xero->setModifiedAfter($after);
  }

  if ($items) {
    $list_definition = $xero->typed_data->createListDataDefinition($plugin_id);
    $data = $xero->typed_data->create($xero->getDefinition(), $items, NULL, $list_definition);

    $xero->setData($data);
  }

  return $xero->execute();
}

/**
 * Evaluate error messages and send appropriate drupal status messages.
 * @param $code Optional Xero error code.
 * @param $type Optional Xero error type.
 * @param $message Xero error message.
 * @param $items The items that were posted.
 * @param $result The entire result array.
 */
function xero_error($code = 0, $type = '', $message, $items = 'N/A', $result = 'N/A') {
  $error_code = (!empty($type)) ? $code . ' ' . $type : $code;
  $format_options = array('@code' => $error_code, '@message' => $message);
  // drupal_set_message(t('Error @code: @message', $format_options), 'error');

  $format_options['!items'] = '<div><h3>Items</h3><pre>' . print_r($items, TRUE) . '</pre></div>';
  $format_options['!result'] = '<div><h3>Result</h3><pre>' . print_r($result, TRUE) . '</pre></div>';
  // watchdog('xero', 'Error @code: @message !items !result', $format_options, WATCHDOG_CRITICAL, NULL);
}
